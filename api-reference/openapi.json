{
  "openapi": "3.0.1",
  "info": {
    "title": "Batu metrics API",
    "description": "Batu metrics API specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://sandbox.batuenergy.com/api/v1"
    },
    {
      "url": "http://production.batuenergy.com/api/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/asset/{id}": {
      "delete": {
        "description": "Given the asset id deletes the associated asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of asset to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Asset response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteAsset"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Given the asset id returns the asssociated asset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of asset to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Asset response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetAsset"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/asset": {
      "post": {
        "description": "Creates a new asset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPostAsset"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Asset response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPostAsset"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates an asset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPutAsset"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Asset response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPutAsset"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/makes": {
      "get": {
        "description": "Given the filters, returns all makes the organization has access to",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "The type of assets to return",
            "schema": {
              "type": "string",
              "enum": ["METER", "EV", "SOLAR", "BATTERY"]
            }
          },
          {
            "name": "brand",
            "in": "query",
            "required": false,
            "description": "The brand of makes to return",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Get makes response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMakes"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/make/{id}": {
      "delete": {
        "description": "Given the make id deletes the associated make",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of make to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Make response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteMake"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Given the make id returns the asssociated make",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of make to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Make response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMake"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/make": {
      "post": {
        "description": "Creates a new make",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPostMake"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Make response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPostMake"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates a make",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPutMake"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Make response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPutMake"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/integration/{id}": {
      "delete": {
        "description": "Given the integration id deletes the associated integration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of integration to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Integration response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteIntegration"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Given the integration id returns the asssociated integration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of integration to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "metric response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetIntegration"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/integration": {
      "post": {
        "description": "Creates a new integration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPostIntegration"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Integration response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPostIntegration"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates an integration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPutIntegration"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Metric response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPutIntegration"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/metric/{id}": {
      "delete": {
        "description": "Given the metric id deletes the associated metric",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of metric to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Metric response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteMetric"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Given the metric id returns the asssociated metric",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of metric to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Metric response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetMetric"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/metric": {
      "post": {
        "description": "Creates a new metric",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPostMetric"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Metric response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPostMetric"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates a metric",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPutMetric"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Metric response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPutMetric"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/process/{id}": {
      "delete": {
        "description": "Given the process id deletes the associated process",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of process to delete",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Process response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessDeleteProcess"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Given the process id returns the asssociated process",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of process to return",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Process response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetProcess"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/process": {
      "post": {
        "description": "Creates a new process",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPostProcess"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Process response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPostProcess"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      },
      "put": {
        "description": "Updates a process",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPutProcess"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Process response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPutProcess"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/job": {
      "post": {
        "description": "Creates a new job",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPostJob"
              }
            }
          }
        },
        "responses": {
          "2XX": {
            "description": "Job response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessPostJob"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/job/{id}": {
      "get": {
        "description": "Retrieves a job by its id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the job to retrieve",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Job response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetJob"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/metric/records/{id}": {
      "get": {
        "description": "Given the filters, returns all the records associated with the metric",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The metric for which the records are to be returned",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "format": "uuid",
                "example": "mtc_<uuid>"
              }
            }
          },
          {
            "name": "startTs",
            "in": "query",
            "required": true,
            "description": "the start of the date range, expressed in unix timestamp, for which the records are to be returned",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1725000000
            }
          },

          {
            "name": "endTs",
            "in": "query",
            "required": true,
            "description": "the end of the date range, expressed in unix timestamp, for which the records are to be returned",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 1727220000
            }
          },
          {
            "name": "granularity",
            "in": "query",
            "required": true,
            "description": "The granularity of the metric records to be retrieved, as a time interval",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "example": "5m"
              }
            }
          },
          {
            "name": "shift",
            "in": "query",
            "required": false,
            "description": "The time shift of the metric records to be retrieved, as a time interval",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "example": "1m"
              }
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Get records response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetRecords"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/metric/records/{id}/intervals": {
      "get": {
        "description": "Given the filters, returns all the intervals associated with the metric",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The metric id for which the intervals are to be returned",
            "schema": {
              "type": "string",
              "items": {
                "type": "string",
                "format": "uuid",
                "example": "mtc_<uuid>"
              }
            }
          }
        ],
        "responses": {
          "2XX": {
            "description": "Get intervals response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessGetIntervals"
                }
              }
            }
          },
          "4XX": {
            "description": "Failed request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseFail"
                }
              }
            }
          },
          "5XX": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SuccessGetAssets": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "assets"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "assets": {
                "description": "The returned assets",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResponseAsset"
                }
              }
            }
          }
        }
      },
      "SuccessGetAsset": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "asset"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "asset": {
                "description": "The returned asset",
                "$ref": "#/components/schemas/ResponseAsset"
              }
            }
          }
        }
      },
      "SuccessDeleteAsset": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "message"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "message": {
                "description": "Message indicating the succesful deletion of the asset",
                "example": "Asset deleted successfully",
                "type": "string"
              }
            }
          }
        }
      },
      "SuccessPostAsset": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "assets"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "asset": {
                "description": "The created asset",
                "$ref": "#/components/schemas/ResponseAsset"
              }
            }
          }
        }
      },
      "SuccessPutAsset": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "assets"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "asset": {
                "description": "The updated asset",
                "$ref": "#/components/schemas/ResponseAsset"
              }
            }
          }
        }
      },
      "RequestPostAsset": {
        "type": "object",
        "required": ["name", "make"],
        "properties": {
          "name": {
            "description": "The name of the asset",
            "type": "string"
          },
          "make": {
            "description": "The id of make of the asset",
            "type": "string",
            "example": "mke_<uuid>",
            "format": "uuid"
          },
          "metrics": {
            "description": "The id of metrics associated with the asset",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "mtc_<uuid>"
            }
          },
          "metadata": {
            "description": "The metadata associated with the asset",
            "type": "string",
            "nullable": true
          }
        }
      },
      "RequestPutAsset": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "description": "The id of the asset",
            "type": "string",
            "example": "ast_<uuid>",
            "format": "uuid"
          },
          "name": {
            "description": "The name of the asset",
            "type": "string"
          },
          "make": {
            "description": "The id of make of the asset",
            "type": "string",
            "example": "mke_<uuid>",
            "format": "uuid"
          },
          "metrics": {
            "description": "The id of metrics associated with the asset",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "mtc_<uuid>"
            }
          },
          "metadata": {
            "description": "The metadata associated with the asset",
            "type": "string"
          }
        }
      },
      "ResponseAsset": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "make",
          "metrics",
          "metadata"
        ],
        "properties": {
          "id": {
            "description": "the id of the asset",
            "type": "string",
            "example": "ast_<uuid>",
            "format": "uuid"
          },
          "created_at": {
            "description": "the time the asset was created",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "the time the asset was updated",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "The name of the asset",
            "type": "string"
          },
          "make": {
            "description": "The id of make of the asset",
            "type": "string",
            "example": "mke_<uuid>",
            "format": "uuid"
          },
          "metrics": {
            "description": "The id of metrics associated with the asset",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "mtc_<uuid>"
            },
            "nullable": true
          },
          "metadata": {
            "description": "The metadata associated with the asset",
            "type": "string",
            "nullable": true
          }
        }
      },
      "SuccessGetMakes": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "makes"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "makes": {
                "description": "The returned makes",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResponseMake"
                }
              }
            }
          }
        }
      },
      "SuccessGetMake": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "make"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "make": {
                "description": "The returned make",
                "$ref": "#/components/schemas/ResponseMake"
              }
            }
          }
        }
      },
      "SuccessDeleteMake": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "message"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "message": {
                "description": "Message indicating the succesful deletion of the make",
                "example": "Make deleted successfully",
                "type": "string"
              }
            }
          }
        }
      },
      "SuccessPostMake": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "make"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "make": {
                "description": "The created make",
                "$ref": "#/components/schemas/ResponseMake"
              }
            }
          }
        }
      },
      "SuccessPutMake": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "make"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "make": {
                "description": "The updated make",
                "$ref": "#/components/schemas/ResponseMake"
              }
            }
          }
        }
      },
      "RequestPostMake": {
        "type": "object",
        "required": ["type", "brand", "model", "version"],
        "properties": {
          "type": {
            "description": "The type of device the make refers to",
            "type": "string",
            "enum": ["METER", "EV", "SOLAR", "BATTERY"]
          },
          "brand": {
            "description": "The brand of the make",
            "type": "string"
          },
          "model": {
            "description": "The model of the make",
            "type": "string"
          },
          "version": {
            "description": "The version of the make",
            "type": "string"
          },
          "integrations": {
            "description": "The integrations associated with the make",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "int_<uuid>"
            }
          },
          "metadata": {
            "description": "The metadata associated with the make",
            "type": "string",
            "nullable": true
          }
        }
      },
      "RequestPutMake": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "description": "The id of the make",
            "type": "string",
            "example": "mke_<uuid>",
            "format": "uuid"
          },
          "type": {
            "description": "The type of device the make refers to",
            "type": "string",
            "enum": ["METER", "EV", "SOLAR", "BATTERY"]
          },
          "brand": {
            "description": "The brand of the make",
            "type": "string"
          },
          "model": {
            "description": "The model of the make",
            "type": "string"
          },
          "version": {
            "description": "The version of the make",
            "type": "string"
          },
          "integrations": {
            "description": "The integrations associated with the make",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "int_<uuid>"
            }
          },
          "metadata": {
            "description": "The metadata associated with the make",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ResponseMake": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "brand",
          "model",
          "version",
          "integrations",
          "metadata"
        ],
        "properties": {
          "id": {
            "description": "the id of the make",
            "type": "string",
            "example": "mke_<uuid>",
            "format": "uuid"
          },
          "created_at": {
            "description": "the time the make was created",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "the time the make was updated",
            "type": "string",
            "format": "date-time"
          },
          "type": {
            "description": "The type of device the make refers to",
            "type": "string",
            "enum": ["METER", "EV", "SOLAR", "BATTERY"]
          },
          "brand": {
            "description": "The brand of the make",
            "type": "string"
          },
          "model": {
            "description": "The model of the make",
            "type": "string"
          },
          "version": {
            "description": "The version of the make",
            "type": "string"
          },
          "integrations": {
            "description": "The integrations associated with the make",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "int_<uuid>"
            },
            "nullable": true
          },
          "metadata": {
            "description": "The metadata associated with the make",
            "type": "string",
            "nullable": true
          }
        }
      },
      "SuccessGetIntegration": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "integration"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "integration": {
                "description": "The returned integration",
                "$ref": "#/components/schemas/ResponseIntegration"
              }
            }
          }
        }
      },
      "SuccessDeleteIntegration": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "message"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "message": {
                "description": "Message indicating the succesful deletion of the integration",
                "example": "metric deleted successfully",
                "type": "string"
              }
            }
          }
        }
      },
      "SuccessPostIntegration": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "integration"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "integration": {
                "description": "The created integration",
                "$ref": "#/components/schemas/ResponseIntegration"
              }
            }
          }
        }
      },
      "SuccessPutIntegration": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "integration"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "integration": {
                "description": "The updated integration",
                "$ref": "#/components/schemas/ResponseIntegration"
              }
            }
          }
        }
      },
      "RequestPostIntegration": {
        "type": "object",
        "required": ["name", "protocol", "type", "specs"],
        "properties": {
          "name": {
            "description": "The name of the integration",
            "type": "string"
          },
          "protocol": {
            "description": "The protocol of the integration",
            "type": "string",
            "enum": [
              "HTTP",
              "MQTT",
              "Websocket",
              "Modbus",
              "Backnet",
              "DBQuery"
            ]
          },
          "type": {
            "description": "The type of the integration",
            "type": "string",
            "enum": ["pull", "push"]
          },
          "specs": {
            "description": "The specifications supported by the integration",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "granularity": {
                  "description": "The time granularity supported by the integration",
                  "type": "string",
                  "example": "5m"
                },
                "range": {
                  "description": "The maximum size of the time widnow of data supported by the integration",
                  "type": "string",
                  "example": "1mo"
                },
                "schedule": {
                  "description": "Possible schedules of invocation of the integration, as cron expression",
                  "type": "string",
                  "example": "* * * * *"
                },
                "shift": {
                  "description": "Is time shifting supported by the integration",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "metadata": {
            "description": "The metadata associated with the integration",
            "type": "string",
            "nullable": true
          }
        }
      },
      "RequestPutIntegration": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "name": {
            "description": "The name of the integration",
            "type": "string"
          },
          "protocol": {
            "description": "The protocol of the integration",
            "type": "string",
            "enum": [
              "HTTP",
              "MQTT",
              "Websocket",
              "Modbus",
              "Backnet",
              "DBQuery"
            ]
          },
          "type": {
            "description": "The type of the integration",
            "type": "string",
            "enum": ["pull", "push"]
          },
          "specs": {
            "description": "The specifications supported by the integration",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "granularity": {
                  "description": "The time granularity supported by the integration",
                  "type": "string",
                  "example": "5m"
                },
                "range": {
                  "description": "The maximum size of the time widnow of data supported by the integration",
                  "type": "string",
                  "example": "1mo"
                },
                "schedule": {
                  "description": "Possible schedules of invocation of the integration, as cron expression",
                  "type": "string",
                  "example": "* * * * *"
                },
                "shift": {
                  "description": "Is time shifting supported by the integration",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "metadata": {
            "description": "The metadata associated with the integration",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ResponseIntegration": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name",
          "protocol",
          "type",
          "specs",
          "metadata"
        ],
        "properties": {
          "id": {
            "description": "the id of the integration",
            "type": "string",
            "example": "<uuid>",
            "format": "uuid"
          },
          "created_at": {
            "description": "the time the integration was created",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "the time the integration was updated",
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "description": "The name of the integration",
            "type": "string"
          },
          "protocol": {
            "description": "The protocol of the integration",
            "type": "string",
            "enum": [
              "HTTP",
              "MQTT",
              "Websocket",
              "Modbus",
              "Backnet",
              "DBQuery"
            ]
          },
          "type": {
            "description": "The type of the integration",
            "type": "string",
            "enum": ["pull", "push"]
          },
          "specs": {
            "description": "The specifications supported by the integration",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "granularity": {
                  "description": "The time granularity supported by the integration",
                  "type": "string",
                  "example": "5m"
                },
                "range": {
                  "description": "The maximum size of the time widnow of data supported by the integration",
                  "type": "string",
                  "example": "1mo"
                },
                "schedule": {
                  "description": "Possible schedules of invocation of the integration, as cron expression",
                  "type": "string",
                  "example": "* * * * *"
                },
                "shift": {
                  "description": "Is time shifting supported by the integration",
                  "type": "boolean",
                  "example": true
                }
              }
            }
          },
          "metadata": {
            "description": "The metadata associated with the integration",
            "type": "string",
            "nullable": true
          }
        }
      },
      "SuccessGetMetric": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "metric"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "metric": {
                "description": "The returned metric",
                "$ref": "#/components/schemas/ResponseMetric"
              }
            }
          }
        }
      },
      "SuccessDeleteMetric": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "message"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "message": {
                "description": "Message indicating the succesful deletion of the metric",
                "example": "Metric deleted successfully",
                "type": "string"
              }
            }
          }
        }
      },
      "SuccessPostMetric": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "metric"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "metric": {
                "description": "The created metric",
                "$ref": "#/components/schemas/ResponseMetric"
              }
            }
          }
        }
      },
      "SuccessPutMetric": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "integration"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid",
                "example": "exe_<uuid>"
              },
              "metric": {
                "description": "The updated metric",
                "$ref": "#/components/schemas/ResponseMetric"
              }
            }
          }
        }
      },
      "RequestPostMetric": {
        "type": "object",
        "required": ["name", "variable", "units", "type"],
        "properties": {
          "processes": {
            "description": "The id of the processes associated with the metric",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "prc_<uuid>"
            }
          },
          "name": {
            "description": "The name of the metric",
            "type": "string"
          },
          "variable": {
            "description": "The variable associated with the metric",
            "type": "string"
          },
          "units": {
            "description": "The units associated with the metric",
            "type": "string"
          },
          "type": {
            "description": "The type of data associated with the metric",
            "type": "string",
            "enum": ["number", "boolean", "string"]
          },
          "metadata": {
            "description": "The metadata associated with the metric",
            "type": "string",
            "nullable": true
          }
        }
      },
      "RequestPutMetric": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "description": "The id of the metric",
            "type": "string",
            "example": "<uuid>",
            "format": "uuid"
          },
          "processes": {
            "description": "The id of the processes associated with the metric",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid",
              "example": "prc_<uuid>"
            }
          },
          "name": {
            "description": "The name of the metric",
            "type": "string"
          },
          "variable": {
            "description": "The variable associated with the metric",
            "type": "string"
          },
          "units": {
            "description": "The units associated with the metric",
            "type": "string"
          },
          "type": {
            "description": "The type of data associated with the metric",
            "type": "string",
            "enum": ["number", "boolean", "string"]
          },
          "metadata": {
            "description": "The metadata associated with the metric",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ResponseMetric": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "processes",
          "name",
          "variable",
          "units",
          "type",
          "metadata"
        ],
        "properties": {
          "id": {
            "description": "The id of the metric",
            "type": "string",
            "example": "<uuid>",
            "format": "uuid"
          },
          "created_at": {
            "description": "the time the metric was created",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "the time the metric was updated",
            "type": "string",
            "format": "date-time"
          },
          "processId": {
            "description": "The id of the process associated with the metric",
            "type": "string",
            "example": "<uuid>",
            "format": "uuid"
          },
          "name": {
            "description": "The name of the metric",
            "type": "string"
          },
          "variable": {
            "description": "The variable associated with the metric",
            "type": "string"
          },
          "units": {
            "description": "The units associated with the metric",
            "type": "string"
          },
          "granularity": {
            "description": "The granularity of the metric",
            "type": "string"
          },
          "type": {
            "description": "The type of data associated with the metric",
            "type": "string",
            "enum": ["number", "boolean", "string"]
          },
          "metadata": {
            "description": "The metadata associated with the metric",
            "type": "string",
            "nullable": true
          }
        }
      },
      "SuccessGetProcess": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "process"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "process": {
                "description": "The returned process",
                "$ref": "#/components/schemas/ResponseProcess"
              }
            }
          }
        }
      },
      "SuccessDeleteProcess": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "message"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "message": {
                "description": "Message indicating the succesful deletion of the process",
                "example": "Process deleted successfully",
                "type": "string"
              }
            }
          }
        }
      },
      "SuccessPostProcess": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "process"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "process": {
                "description": "The created process",
                "$ref": "#/components/schemas/ResponseProcess"
              }
            }
          }
        }
      },
      "SuccessPutProcess": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "process"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "process": {
                "description": "The updated process",
                "$ref": "#/components/schemas/ResponseProcess"
              }
            }
          }
        }
      },
      "RequestPostProcess": {
        "type": "object",
        "required": ["integration", "metric", "formula", "keys"],
        "properties": {
          "integration": {
            "description": "The id of the integration associated with the process",
            "type": "string",
            "example": "int_<uuid>",
            "format": "uuid"
          },
          "metric": {
            "description": "The id of the metric associated with the process",
            "type": "string",
            "example": "mtc_<uuid>",
            "format": "uuid"
          },
          "formula": {
            "description": "The string representation of the formula used to generate the data by the process",
            "type": "string",
            "example": "[NODE 1] * 1000"
          },
          "keys": {
            "description": "Array of keys used in the formula, as represented in the datasource to be processed.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "NODE 1"
            }
          },
          "metadata": {
            "description": "The metadata associated with the process",
            "type": "string",
            "nullable": true
          }
        }
      },
      "RequestPutProcess": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "description": "The id of the process",
            "type": "string",
            "example": "prc_<uuid>",
            "format": "uuid"
          },
          "integration": {
            "description": "The id of the integration associated with the process",
            "type": "string",
            "example": "int_<uuid>",
            "format": "uuid"
          },
          "metric": {
            "description": "The id of the metric associated with the process",
            "type": "string",
            "example": "mtc_<uuid>",
            "format": "uuid"
          },
          "formula": {
            "description": "The string representation of the formula used to generate the data by the process",
            "type": "string",
            "example": "[NODE 1] * 1000"
          },
          "keys": {
            "description": "Array of keys used in the formula, as represented in the datasource to be processed.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "NODE 1"
            }
          },
          "metadata": {
            "description": "The metadata associated with the process",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ResponseProcess": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "integration",
          "metric",
          "formula",
          "keys"
        ],
        "properties": {
          "id": {
            "description": "The id of the process",
            "type": "string",
            "example": "<uuid>",
            "format": "uuid"
          },
          "created_at": {
            "description": "the time the process was created",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "the time the process was updated",
            "type": "string",
            "format": "date-time"
          },
          "integration": {
            "description": "The id of the integration associated with the process",
            "type": "string",
            "example": "int_<uuid>",
            "format": "uuid"
          },
          "metric": {
            "description": "The id of the metric associated with the process",
            "type": "string",
            "example": "mtc_<uuid>",
            "format": "uuid"
          },
          "formula": {
            "description": "The string representation of the formula used to generate the data by the process",
            "type": "string",
            "example": "[NODE 1] * 1000"
          },
          "keys": {
            "description": "Array of keys used in the formula, as represented in the datasource to be processed.",
            "type": "array",
            "items": {
              "type": "string",
              "example": "NODE 1"
            }
          },
          "metadata": {
            "description": "The metadata associated with the process",
            "type": "string",
            "nullable": true
          }
        }
      },
      "SuccessGetJob": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "job"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "job": {
                "description": "The returned job",
                "$ref": "#/components/schemas/ResponseJob"
              }
            }
          }
        }
      },
      "SuccessPostJob": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "required": ["execution", "job"],
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "job": {
                "description": "The created job",
                "$ref": "#/components/schemas/ResponseJob"
              }
            }
          }
        }
      },
      "RequestPostJob": {
        "type": "object",
        "required": ["metric", "startTs", "endTs", "granularity", "shift"],
        "properties": {
          "metric": {
            "description": "The id of the metric associated with the job",
            "type": "string"
          },
          "startTs": {
            "description": "The start of the interval for retrieving the data associated with the metric, expressed as unix timestamp",
            "type": "integer",
            "format": "int64"
          },
          "endTs": {
            "description": "The end of the interval for retrieving the data associated with the metric, expressed as unix timestamp",
            "type": "integer",
            "format": "int64"
          },
          "granularity": {
            "description": "The granularity of the job, expressed as a time interval",
            "example": "5m",
            "type": "string"
          },
          "shift": {
            "description": "The time shift of the job, expressed as a time interval",
            "example": "1m",
            "type": "string"
          },
          "metadata": {
            "description": "The metadata associated with the job",
            "type": "string",
            "nullable": true
          }
        }
      },
      "ResponseJob": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "updated_at",
          "process",
          "description",
          "startTs",
          "endTs",
          "granularity",
          "shift",
          "status",
          "metadata"
        ],
        "properties": {
          "id": {
            "description": "The id of the job",
            "type": "string",
            "example": "<uuid>",
            "format": "uuid"
          },
          "created_at": {
            "description": "the time the job was created",
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "description": "the time the job was updated",
            "type": "string",
            "format": "date-time"
          },
          "process": {
            "description": "The id of the process associated with the job",
            "type": "string",
            "example": "prc_<uuid>",
            "format": "uuid"
          },
          "description": {
            "description": "The description of the job",
            "type": "string"
          },
          "startTs": {
            "description": "The start of the interval for retrieving the data associated with the metric, expressed as unix timestamp",
            "type": "integer",
            "format": "int64"
          },
          "endTs": {
            "description": "The end of the interval for retrieving the data associated with the metric, expressed as unix timestamp",
            "type": "integer",
            "format": "int64"
          },
          "granularity": {
            "description": "The granularity of the job, expressed as a time interval",
            "example": "5m",
            "type": "string"
          },
          "shift": {
            "description": "The time shift of the job, expressed as a time interval",
            "example": "1m",
            "type": "string"
          },
          "status": {
            "description": "The status of the job",
            "type": "string",
            "enum": ["IN QUEUE", "CANCELED", "IN PROGRESS", "SUCCESS", "FAILED"]
          },
          "metadata": {
            "description": "The metadata associated with the job",
            "type": "string",
            "nullable": true
          }
        }
      },
      "SuccessGetRecords": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "records": {
                "type": "array",
                "description": "The metric records",
                "items": {
                  "type": "object",
                  "properties": {
                    "ts": {
                      "description": "The date time associated with the record",
                      "type": "integer",
                      "format": "int64",
                      "example": 1727220785
                    },
                    "value": {
                      "description": "The value associated with the record",
                      "type": "string",
                      "example": "1000"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SuccessGetIntervals": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "string",
            "example": "success",
            "description": "Indicates the request was successful"
          },
          "data": {
            "type": "object",
            "description": "The data associated with the response",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "intervals": {
                "type": "array",
                "description": "The metric intervals",
                "items": {
                  "type": "object",
                  "properties": {
                    "process": {
                      "description": "The process associated with the interval",
                      "type": "string",
                      "example": "prc_<uuid>"
                    },
                    "startTs": {
                      "description": "The start date time of the interval",
                      "type": "integer",
                      "format": "int64",
                      "example": 1727220785
                    },
                    "endTs": {
                      "description": "The end date time of the interval",
                      "type": "integer",
                      "format": "int64",
                      "example": 1727220785
                    },
                    "granularity": {
                      "description": "The granularity of the interval",
                      "type": "string",
                      "example": "5m"
                    },
                    "shift": {
                      "description": "The time shift of the interval",
                      "type": "string",
                      "example": "1m"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "ResponseFail": {
        "required": ["status", "data"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "fail"
          },
          "data": {
            "type": "object",
            "properties": {
              "execution": {
                "description": "The execution id of the request",
                "type": "string",
                "format": "uuid"
              },
              "[parameter]": {
                "type": "string",
                "example": "Message describing the invalid parameter or value associated with the request",
                "description": "Message describing the invalid parameter or value associated with the request"
              }
            }
          }
        }
      },
      "ResponseError": {
        "required": ["status", "execution", "message", "code"],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "error"
          },
          "execution": {
            "description": "The execution id of the request",
            "type": "string",
            "format": "uuid"
          },
          "message": {
            "type": "string",
            "example": "Message describing the error from the server",
            "description": "Message describing the error from the server"
          },
          "code": {
            "type": "integer",
            "format": "int32",
            "description": "The error code from the server"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
